#include <iostream>
#include <string>

namespace containers {

// Определение шаблонного класса NameClass
template <typename T>
class NameClass {
public:
    // Определение структуры узла (Node) для хранения значений и указателей на предыдущий и следующий узлы
    struct Node {
        T value;

        // Конструкторы узла: принимающий lvalue-ссылку и rvalue-ссылку на значение
        Node(const T& val) : value(val) {}
        Node(T&& val) : value(std::move(val)) {}

        Node* prev;
        Node* next;
    };

    // Конструктор по умолчанию
    NameClass() : head(nullptr), tail(nullptr), size(0) {}

    // Конструктор от std::initializer_list<T>
    NameClass(const std::initializer_list<T>& initList) : head(nullptr), tail(nullptr), size(0) {
        for (const auto& val : initList) {
            push_back(val);
        }
    }

    // Конструктор копирования
    NameClass(const NameClass<T>& other) : head(nullptr), tail(nullptr), size(0) {
        Node* current = other.head;
        while (current) {
            push_back(current->value);
            current = current->next;
        }
    }

    // Копирующий оператор присваивания
    NameClass<T>& operator=(const NameClass<T>& other) {
        if (this != &other) {
            clear();
            Node* current = other.head;
            while (current) {
                push_back(current->value);
                current = current->next;
            }
        }
        return *this;
    }

    // Конструктор перемещения
    NameClass(NameClass<T>&& other) : head(other.head), tail(other.tail), size(other.size) {
        other.head = nullptr;
        other.tail = nullptr;
        other.size = 0;
    }

    // Перемещающий оператор присваивания
    NameClass<T>& operator=(NameClass<T>&& other) {
        if (this != &other) {
            clear();
            head = other.head;
            tail = other.tail;
            size = other.size;
            other.head = nullptr;
            other.tail = nullptr;
            other.size = 0;
        }
        return *this;
    }

    // Деструктор
    ~NameClass() {
        clear();
    }

    // Добавление элемента в конец списка
    void push_back(const T& value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    // Добавление элемента в начало списка
    void push_front(const T& value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            // Здесь завершается ваш предоставленный код. Я добавлю пару строк, чтобы завершить функцию push_front
            head->prev = newNode;
            newNode->next = head;
            head = newNode;
        }
        size++;
    }

    // Другие методы, такие как clear(), можно реализовать по аналогии, если необходимо.
    // Не забывайте освободить выделенную память в деструкторе и в методе clear().

private:
    Node* head;
    Node* tail;
    std::size_t size;
};

} // namespace containers

int main() {
    containers::NameClass<int> list = {1, 2, 3, 4, 5};
    list.push_back(6);
    list.push_front(0);

    return 0;
}
